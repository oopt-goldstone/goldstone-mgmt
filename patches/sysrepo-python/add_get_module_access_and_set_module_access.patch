Index: goldstone-mgmt/sm/sysrepo-python/cffi/cdefs.h
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/cffi/cdefs.h
+++ goldstone-mgmt/sm/sysrepo-python/cffi/cdefs.h
@@ -79,6 +79,9 @@ int sr_remove_module(sr_conn_ctx_t *, co
 int sr_update_module(sr_conn_ctx_t *, const char *, const char *);
 int sr_enable_module_feature(sr_conn_ctx_t *, const char *, const char *);
 int sr_disable_module_feature(sr_conn_ctx_t *, const char *, const char *);
+typedef unsigned int mode_t;
+int sr_get_module_access(sr_conn_ctx_t *, const char *, char **, char **, mode_t *);
+int sr_set_module_access(sr_conn_ctx_t *, const char *, const char *, const char *, mode_t);
 
 int sr_session_start(sr_conn_ctx_t *, const sr_datastore_t, sr_session_ctx_t **);
 int sr_session_stop(sr_session_ctx_t *);
Index: goldstone-mgmt/sm/sysrepo-python/sysrepo/connection.py
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/sysrepo/connection.py
+++ goldstone-mgmt/sm/sysrepo-python/sysrepo/connection.py
@@ -3,14 +3,14 @@
 
 import logging
 import signal
-from typing import Optional, Sequence
+from typing import Optional, Sequence, Tuple
 
 import libyang
 
 from _sysrepo import ffi, lib
 from .errors import SysrepoInternalError, check_call
 from .session import SysrepoSession, datastore_value
-from .util import str2c
+from .util import str2c, c2str
 
 
 LOG = logging.getLogger(__name__)
@@ -156,6 +156,29 @@ class SysrepoConnection:
             len(enabled_features),
         )
 
+    def get_module_access(self, name: str) -> Tuple[str, str, int]:
+        owner = ffi.new("char[64]")
+        owner_p = ffi.new("char **", owner)
+        group = ffi.new("char[64]")
+        group_p = ffi.new("char **", group)
+        mode_p = ffi.new("unsigned int *")
+
+        check_call(
+            lib.sr_get_module_access, self.cdata, str2c(name), owner_p, group_p, mode_p
+        )
+
+        return c2str(owner_p[0]), c2str(group_p[0]), mode_p[0]
+
+    def set_module_access(self, name: str, owner: str, group: str, mode: int) -> None:
+        check_call(
+            lib.sr_set_module_access,
+            self.cdata,
+            str2c(name),
+            str2c(owner),
+            str2c(group),
+            mode,
+        )
+
     def remove_module(self, name: str) -> None:
         """
         Remove an installed module from sysrepo. Deferred until there are no
