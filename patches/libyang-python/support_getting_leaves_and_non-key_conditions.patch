Index: v2/sm/libyang-python/libyang/xpath.py
===================================================================
--- v2.orig/sm/libyang-python/libyang/xpath.py
+++ v2/sm/libyang-python/libyang/xpath.py
@@ -147,7 +147,13 @@ def _list_find_key_index(keys: List[Tupl
 
 
 # -------------------------------------------------------------------------------------
-def _xpath_find(data: Dict, xparts: List, create_if_missing: bool = False) -> Any:
+def _xpath_find(
+    data: Dict,
+    xparts: List,
+    create_if_missing: bool = False,
+    filter: bool = False,
+    recursive_call: bool = False,
+) -> Any:
     """
     Descend into a data dictionary.
 
@@ -165,48 +171,99 @@ def _xpath_find(data: Dict, xparts: List
     :raises TypeError:
         If `data` does not match the expected structure conveyed by `xparts`.
     """
-    for _, name, keys in xparts:
-        if not isinstance(data, dict):
-            raise TypeError("expected a dict")
-        if keys:
-            if name not in data and create_if_missing:
-                data[name] = KeyedList(key_name=_xpath_keys_to_key_name(keys))
-            lst = data[name]  # may raise KeyError
-            if isinstance(lst, KeyedList):
-                try:
-                    data = lst[_xpath_keys_to_key_val(keys)]
-                except KeyError:
-                    if not create_if_missing:
-                        raise
-                    data = dict(keys)
-                    lst.append(data)
-
-            elif isinstance(lst, list):
-                # regular python list, need to iterate over it
-                try:
-                    i = _list_find_key_index(keys, lst)
-                    data = lst[i]
-                except ValueError:
-                    # not found
-                    if not create_if_missing:
-                        raise KeyError(keys) from None
-                    data = dict(keys)
-                    lst.append(data)
-
-            else:
-                raise TypeError("expected a list")
-
-        elif create_if_missing:
-            data = data.setdefault(name, {})
-
+    xparts = list(xparts)
+    for i, (_, name, keys) in enumerate(xparts):
+        if isinstance(data, list):
+            if create_if_missing:
+                raise TypeError("expected a dict")
+            d = []
+            for l in data:
+                if not all(
+                    k in l[name] and py_to_yang(l[name][k]) == v for k, v in keys
+                ):
+                    continue
+                v = _xpath_find(
+                    l[name],
+                    xparts[i + 1 :],
+                    create_if_missing,
+                    recursive_call=True,
+                )
+                if v is not None:
+                    if keys and not filter:
+                        return v
+                    d.append(v)
+            return d
+        elif keys:
+            if isinstance(data, dict):
+                if name not in data and create_if_missing:
+                    data[name] = KeyedList(key_name=_xpath_keys_to_key_name(keys))
+                lst = data[name]  # may raise KeyError
+
+                if filter and isinstance(lst, KeyedList):
+                    lst = list(lst)
+
+                if isinstance(lst, KeyedList):
+                    try:
+                        data = lst[_xpath_keys_to_key_val(keys)]
+                    except KeyError:
+                        if recursive_call:
+                            return None
+                        if not create_if_missing:
+                            raise
+                        data = dict(keys)
+                elif isinstance(lst, list):
+                    # regular python list, need to iterate over it
+                    try:
+                        d = []
+                        for l in lst:
+                            for key, value in keys:
+                                v = l
+                                for k in key.split("/"):
+                                    v = v[k]
+                                if str(v) != str(value):
+                                    break
+                            else:
+                                v = _xpath_find(
+                                    l,
+                                    xparts[i + 1 :],
+                                    create_if_missing,
+                                    recursive_call=True,
+                                )
+                                if v is not None:
+                                    if not filter:
+                                        return v
+                                    d.append(v)
+                        return d
+                    except ValueError:
+                        # not found
+                        if recursive_call:
+                            return None
+                        if not create_if_missing:
+                            raise KeyError(keys) from None
+                        data = dict(keys)
+                elif isinstance(lst, dict):
+                    if all(k in lst and py_to_yang(lst[k]) == v for k, v in keys):
+                        return lst
+                    elif recursive_call:
+                        return None
+                else:
+                    raise TypeError("expected a dict or list")
+            elif recursive_call:
+                return data
         else:
-            data = data[name]  # may raise KeyError
+            if isinstance(data, dict):
+                if create_if_missing:
+                    data = data.setdefault(name, {})
+                else:
+                    data = data[name]  # may raise KeyError
+            elif recursive_call:
+                return data
 
     return data
 
 
 # -------------------------------------------------------------------------------------
-def xpath_get(data: Dict, xpath: str, default: Any = None) -> Any:
+def xpath_get(data: Dict, xpath: str, default: Any = None, filter: bool = False) -> Any:
     """
     Get an element from a data structure (dict) that matches the given xpath.
 
@@ -220,7 +277,9 @@ def xpath_get(data: Dict, xpath: str, de
     {}
     """
     try:
-        return _xpath_find(data, xpath_split(xpath), create_if_missing=False)
+        return _xpath_find(
+            data, xpath_split(xpath), create_if_missing=False, filter=filter
+        )
     except KeyError:
         return default
 
Index: v2/sm/libyang-python/tests/test_xpath.py
===================================================================
--- v2.orig/sm/libyang-python/tests/test_xpath.py
+++ v2/sm/libyang-python/tests/test_xpath.py
@@ -27,6 +27,16 @@ class XPathTest(unittest.TestCase):
                 self.assertNotEqual(res, value)
                 self.assertEqual(res, defval)
 
+    def test_xpath_get_filter(self):
+        for xpath, value, defval, expected in XPATH_GET_FILTER_EXPECTED_RESULTS:
+            res = ly.xpath_get(DICT, xpath, defval, True)
+            if expected:
+                self.assertEqual(res, value)
+                self.assertNotEqual(res, defval)
+            else:
+                self.assertNotEqual(res, value)
+                self.assertEqual(res, defval)
+
     def test_xpath_set(self):
         d = copy.deepcopy(DICT)
         ly.xpath_set(d, "/val", 43)
@@ -103,6 +113,43 @@ class XPathTest(unittest.TestCase):
                 "lst2": ["a", "b", "c"],
                 "lstnum": [1, 10, 20, 30, 40, 100],
                 "val": 43,
+                "int-key": {
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "data": "data 1",
+                            },
+                            {
+                                "key": 2,
+                                "data": "data 2",
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
+                "falsy-values": {
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "false": False,
+                                "zero": 0,
+                                "empty-str": "",
+                                "empty-dict": {},
+                                "empty-list": [],
+                                "empty-tuple": (),
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
             },
         )
 
@@ -166,6 +213,43 @@ class XPathTest(unittest.TestCase):
                     {"name": "eth3", "mtu": 1000},
                 ],
                 "lstnum": [10, 30, 40],
+                "int-key": {
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "data": "data 1",
+                            },
+                            {
+                                "key": 2,
+                                "data": "data 2",
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
+                "falsy-values": {
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "false": False,
+                                "zero": 0,
+                                "empty-str": "",
+                                "empty-dict": {},
+                                "empty-list": [],
+                                "empty-tuple": (),
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
             },
         )
 
@@ -303,6 +387,43 @@ DICT = {
     "lst2": ["a", "b", "c"],
     "lstnum": [10, 20, 30, 40],
     "val": 42,
+    "int-key": {
+        "list": ly.KeyedList(
+            [
+                {
+                    "key": 1,
+                    "data": "data 1",
+                },
+                {
+                    "key": 2,
+                    "data": "data 2",
+                },
+            ],
+            key_name="key",
+        ),
+    },
+    "falsy-values": {
+        "false": False,
+        "zero": 0,
+        "empty-str": "",
+        "empty-dict": {},
+        "empty-list": [],
+        "empty-tuple": (),
+        "list": ly.KeyedList(
+            [
+                {
+                    "key": 1,
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                },
+            ],
+            key_name="key",
+        ),
+    },
 }
 
 XPATH_GET_EXPECTED_RESULTS = [
@@ -325,8 +446,91 @@ XPATH_GET_EXPECTED_RESULTS = [
     ("cont2/leaf2", "coucou2", None, True),
     ("cont1/leaf2", "not found", "fallback", False),
     ("cont1/leaf2", "not found", None, False),
+    ("iface/name", ["eth0", "eth1"], None, True),
+    (
+        "iface/ipv4/address/ip",
+        [["10.0.0.1", "10.0.0.153"], ["10.0.0.2", "10.0.0.6"]],
+        None,
+        True,
+    ),
+    (
+        "iface/ipv4/address[ip='10.0.0.1']",
+        [{"ip": "10.0.0.1"}],
+        None,
+        True,
+    ),
+    (
+        "iface[name='eth0']/ipv4/address/ip",
+        ["10.0.0.1", "10.0.0.153"],
+        None,
+        True,
+    ),
+]
+
+XPATH_GET_FILTER_EXPECTED_RESULTS = [
+    ("/val", 42, None, True),
+    ("val", 42, None, True),
+    ("lst2", ["a", "b", "c"], None, True),
+    (
+        "iface[name='eth0']/ipv4/address",
+        [[{"ip": "10.0.0.1"}, {"ip": "10.0.0.153"}]],
+        None,
+        True,
+    ),
+    (
+        "/iface[name='eth1']/ipv6/address[ip='3ffe::321:8'][prefixlen='64']",
+        [{"ip": "3ffe::321:8", "prefixlen": 64, "tentative": False}],
+        None,
+        True,
+    ),
+    ("cont1/leaf1", "coucou1", None, True),
+    ("cont2/leaf2", "coucou2", None, True),
+    ("cont1/leaf2", "not found", "fallback", False),
+    ("cont1/leaf2", "not found", None, False),
+    ("iface/name", ["eth0", "eth1"], None, True),
+    (
+        "iface/ipv4/address/ip",
+        [["10.0.0.1", "10.0.0.153"], ["10.0.0.2", "10.0.0.6"]],
+        None,
+        True,
+    ),
+    (
+        "iface/ipv4/address[ip='10.0.0.1']",
+        [{"ip": "10.0.0.1"}],
+        None,
+        True,
+    ),
+    (
+        "iface[name='eth0']/ipv4/address/ip",
+        [["10.0.0.1", "10.0.0.153"]],
+        None,
+        True,
+    ),
+    ("iface[name='eth2']/ipv4/address/ip", [], None, True),
+    ("int-key/list[key='1']", [{"key": 1, "data": "data 1"}], None, True),
+    (
+        "int-key/list",
+        [{"key": 1, "data": "data 1"}, {"key": 2, "data": "data 2"}],
+        None,
+        True,
+    ),
+    ("int-key/list[data='data 2']", [{"key": 2, "data": "data 2"}], None, True),
+    ("int-key/list[key='3']", [], None, True),
+    ("falsy-values/false", False, None, True),
+    ("falsy-values/zero", 0, None, True),
+    ("falsy-values/empty-str", "", None, True),
+    ("falsy-values/empty-dict", {}, None, True),
+    ("falsy-values/empty-list", [], None, True),
+    ("falsy-values/empty-tuple", (), None, True),
+    ("falsy-values/list[key='1']/false", [False], None, True),
+    ("falsy-values/list[key='1']/zero", [0], None, True),
+    ("falsy-values/list[key='1']/empty-str", [""], None, True),
+    ("falsy-values/list[key='1']/empty-dict", [{}], None, True),
+    ("falsy-values/list[key='1']/empty-list", [[]], None, True),
+    ("falsy-values/list[key='1']/empty-tuple", [()], None, True),
 ]
 
+
 XPATH_GETALL_EXPECTED_RESULTS = [
     ("/val", [42]),
     ("val", [42]),
