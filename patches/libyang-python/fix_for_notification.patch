Index: goldstone-mgmt/sm/libyang-python/libyang/data.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/data.py
+++ goldstone-mgmt/sm/libyang-python/libyang/data.py
@@ -77,7 +77,9 @@ def parser_flags(
     no_siblings: bool = False,
     explicit: bool = False,
 ) -> int:
-    if (data, config, get, getconfig, edit, rpc, rpcreply, notification).count(True) > 1:
+    if (data, config, get, getconfig, edit, rpc, rpcreply, notification).count(
+        True
+    ) > 1:
         raise ValueError(
             "Only one of data, config, get, getconfig, edit, rpc, rpcreply can be True"
         )
@@ -124,13 +126,14 @@ def diff_flags(
         flags |= lib.LYD_DIFFOPT_NOSIBLINGS
     return flags
 
+
 # -------------------------------------------------------------------------------------
 def dup_flags(
     recursive: bool = False,
     no_attr: bool = False,
     with_parents: bool = False,
     with_keys: bool = False,
-    with_when: bool = False
+    with_when: bool = False,
 ) -> int:
     flags = 0
     if recursive:
@@ -145,6 +148,7 @@ def dup_flags(
         flags |= lib.LYD_DUP_OPT_WITH_WHEN
     return flags
 
+
 # -------------------------------------------------------------------------------------
 class DDiff:
     """
@@ -219,7 +223,7 @@ class DNode:
         no_attr: bool = False,
         with_parents: bool = False,
         with_keys: bool = False,
-        with_when: bool = False
+        with_when: bool = False,
     ) -> "DNode":
         flags = dup_flags(
             recursive=recursive,
@@ -443,6 +447,7 @@ class DNode:
         include_implicit_defaults: bool = False,
         trim_default_values: bool = False,
         keep_empty_containers: bool = False,
+        operational: bool = False,
     ) -> Dict[str, Any]:
         """
         Convert a DNode object to a python dictionary.
@@ -497,6 +502,8 @@ class DNode:
                 for i in range(list_snode.keys_size):
                     key = ffi.cast("struct lys_node *", list_snode.keys[i])
                     keys.append(c2str(key.name))
+                if operational and len(keys) == 0:
+                    return []  # list without key is allowed only for operational data
                 if len(keys) == 1:
                     list_keys_cache[snode] = keys[0]
                 else:
@@ -517,7 +524,9 @@ class DNode:
                 if name not in parent_dic:
                     parent_dic[name] = _init_yang_list(node.schema)
                 parent_dic[name].append(list_element)
-            elif node.schema.nodetype & (SNode.CONTAINER | SNode.RPC | SNode.ACTION | SNode.NOTIF):
+            elif node.schema.nodetype & (
+                SNode.CONTAINER | SNode.RPC | SNode.ACTION | SNode.NOTIF
+            ):
                 container = {}
                 child = node.child
                 while child:
@@ -698,6 +707,8 @@ class DLeaf(DNode):
             return lib.lyd_dec64_to_double(ffi.cast("struct lyd_node *", cdata))
         if val_type == Type.LEAFREF:
             return DLeaf.cdata_leaf_value(cdata.value.leafref)
+        if val_type == Type.INST:
+            return c2str(cdata.value_str)
         return None
 
 
@@ -706,6 +717,7 @@ class DLeaf(DNode):
 class DLeafList(DLeaf):
     pass
 
+
 # -------------------------------------------------------------------------------------
 @DNode.register(SNode.NOTIF)
 class DNotif(DContainer):
