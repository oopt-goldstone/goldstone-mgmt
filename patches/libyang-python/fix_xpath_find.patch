Index: goldstone-mgmt/sm/libyang-python/libyang/xpath.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/xpath.py
+++ goldstone-mgmt/sm/libyang-python/libyang/xpath.py
@@ -188,7 +188,7 @@ def _xpath_find(
                     create_if_missing,
                     recursive_call=True,
                 )
-                if v:
+                if v is not None:
                     if keys and not filter:
                         return v
                     d.append(v)
@@ -220,7 +220,7 @@ def _xpath_find(
                                 v = l
                                 for k in key.split("/"):
                                     v = v[k]
-                                if v != value:
+                                if str(v) != str(value):
                                     break
                             else:
                                 v = _xpath_find(
@@ -229,7 +229,7 @@ def _xpath_find(
                                     create_if_missing,
                                     recursive_call=True,
                                 )
-                                if v:
+                                if v is not None:
                                     if not filter:
                                         return v
                                     d.append(v)
Index: goldstone-mgmt/sm/libyang-python/tests/test_xpath.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/tests/test_xpath.py
+++ goldstone-mgmt/sm/libyang-python/tests/test_xpath.py
@@ -27,6 +27,16 @@ class XPathTest(unittest.TestCase):
                 self.assertNotEqual(res, value)
                 self.assertEqual(res, defval)
 
+    def test_xpath_get_filter(self):
+        for xpath, value, defval, expected in XPATH_GET_FILTER_EXPECTED_RESULTS:
+            res = ly.xpath_get(DICT, xpath, defval, True)
+            if expected:
+                self.assertEqual(res, value)
+                self.assertNotEqual(res, defval)
+            else:
+                self.assertNotEqual(res, value)
+                self.assertEqual(res, defval)
+
     def test_xpath_set(self):
         d = copy.deepcopy(DICT)
         ly.xpath_set(d, "/val", 43)
@@ -103,6 +113,43 @@ class XPathTest(unittest.TestCase):
                 "lst2": ["a", "b", "c"],
                 "lstnum": [1, 10, 20, 30, 40, 100],
                 "val": 43,
+                "int-key": {
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "data": "data 1",
+                            },
+                            {
+                                "key": 2,
+                                "data": "data 2",
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
+                "falsy-values": {
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "false": False,
+                                "zero": 0,
+                                "empty-str": "",
+                                "empty-dict": {},
+                                "empty-list": [],
+                                "empty-tuple": (),
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
             },
         )
 
@@ -166,6 +213,43 @@ class XPathTest(unittest.TestCase):
                     {"name": "eth3", "mtu": 1000},
                 ],
                 "lstnum": [10, 30, 40],
+                "int-key": {
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "data": "data 1",
+                            },
+                            {
+                                "key": 2,
+                                "data": "data 2",
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
+                "falsy-values": {
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                    "list": ly.KeyedList(
+                        [
+                            {
+                                "key": 1,
+                                "false": False,
+                                "zero": 0,
+                                "empty-str": "",
+                                "empty-dict": {},
+                                "empty-list": [],
+                                "empty-tuple": (),
+                            },
+                        ],
+                        key_name="key",
+                    ),
+                },
             },
         )
 
@@ -303,6 +387,43 @@ DICT = {
     "lst2": ["a", "b", "c"],
     "lstnum": [10, 20, 30, 40],
     "val": 42,
+    "int-key": {
+        "list": ly.KeyedList(
+            [
+                {
+                    "key": 1,
+                    "data": "data 1",
+                },
+                {
+                    "key": 2,
+                    "data": "data 2",
+                },
+            ],
+            key_name="key",
+        ),
+    },
+    "falsy-values": {
+        "false": False,
+        "zero": 0,
+        "empty-str": "",
+        "empty-dict": {},
+        "empty-list": [],
+        "empty-tuple": (),
+        "list": ly.KeyedList(
+            [
+                {
+                    "key": 1,
+                    "false": False,
+                    "zero": 0,
+                    "empty-str": "",
+                    "empty-dict": {},
+                    "empty-list": [],
+                    "empty-tuple": (),
+                },
+            ],
+            key_name="key",
+        ),
+    },
 }
 
 XPATH_GET_EXPECTED_RESULTS = [
@@ -338,6 +459,75 @@ XPATH_GET_EXPECTED_RESULTS = [
         None,
         True,
     ),
+    (
+        "iface[name='eth0']/ipv4/address/ip",
+        ["10.0.0.1", "10.0.0.153"],
+        None,
+        True,
+    ),
+]
+
+XPATH_GET_FILTER_EXPECTED_RESULTS = [
+    ("/val", 42, None, True),
+    ("val", 42, None, True),
+    ("lst2", ["a", "b", "c"], None, True),
+    (
+        "iface[name='eth0']/ipv4/address",
+        [[{"ip": "10.0.0.1"}, {"ip": "10.0.0.153"}]],
+        None,
+        True,
+    ),
+    (
+        "/iface[name='eth1']/ipv6/address[ip='3ffe::321:8'][prefixlen='64']",
+        [{"ip": "3ffe::321:8", "prefixlen": 64, "tentative": False}],
+        None,
+        True,
+    ),
+    ("cont1/leaf1", "coucou1", None, True),
+    ("cont2/leaf2", "coucou2", None, True),
+    ("cont1/leaf2", "not found", "fallback", False),
+    ("cont1/leaf2", "not found", None, False),
+    ("iface/name", ["eth0", "eth1"], None, True),
+    (
+        "iface/ipv4/address/ip",
+        [["10.0.0.1", "10.0.0.153"], ["10.0.0.2", "10.0.0.6"]],
+        None,
+        True,
+    ),
+    (
+        "iface/ipv4/address[ip='10.0.0.1']",
+        [{"ip": "10.0.0.1"}],
+        None,
+        True,
+    ),
+    (
+        "iface[name='eth0']/ipv4/address/ip",
+        [["10.0.0.1", "10.0.0.153"]],
+        None,
+        True,
+    ),
+    ("iface[name='eth2']/ipv4/address/ip", [], None, True),
+    ("int-key/list[key='1']", [{"key": 1, "data": "data 1"}], None, True),
+    (
+        "int-key/list",
+        [{"key": 1, "data": "data 1"}, {"key": 2, "data": "data 2"}],
+        None,
+        True,
+    ),
+    ("int-key/list[data='data 2']", [{"key": 2, "data": "data 2"}], None, True),
+    ("int-key/list[key='3']", [], None, True),
+    ("falsy-values/false", False, None, True),
+    ("falsy-values/zero", 0, None, True),
+    ("falsy-values/empty-str", "", None, True),
+    ("falsy-values/empty-dict", {}, None, True),
+    ("falsy-values/empty-list", [], None, True),
+    ("falsy-values/empty-tuple", (), None, True),
+    ("falsy-values/list[key='1']/false", [False], None, True),
+    ("falsy-values/list[key='1']/zero", [0], None, True),
+    ("falsy-values/list[key='1']/empty-str", [""], None, True),
+    ("falsy-values/list[key='1']/empty-dict", [{}], None, True),
+    ("falsy-values/list[key='1']/empty-list", [[]], None, True),
+    ("falsy-values/list[key='1']/empty-tuple", [()], None, True),
 ]
 
 XPATH_GETALL_EXPECTED_RESULTS = [
